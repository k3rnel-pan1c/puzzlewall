<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Puzzlewall</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header class="header">
        <h1>Puzzlewall</h1>
        <div class="theme-switch-wrapper">
            <label class="theme-switch" for="darkModeToggle">
                <input type="checkbox" id="darkModeToggle">
                <div class="slider round"></div>
            </label>
        </div>
    </header>

    <div class="container">
        <h4>Solve the following puzzle:</h4>
        <div class="gamecontainer">
            <div class="grid" id="grid">
                <div class="grid-item" data-number="1"></div>
                <div class="grid-item" data-number="2"></div>
                <div class="grid-item" data-number="3"></div>
                <div class="grid-item" data-number="4"></div>
                <div class="grid-item" data-number="5"></div>
                <div class="grid-item" data-number="6"></div>
                <div class="grid-item" data-number="7"></div>
                <div class="grid-item" data-number="8"></div>
                <div class="grid-item" data-number="9"></div>
            </div>
        </div>
        <div id="message" class="message"></div>
        <div id="input-section" class="hidden">
            <input type="text" class="name" id="name" placeholder="your name">
            <button class="button" id="submit-button">Submit Score</button>
        </div>
        <div id="continue-section" class="hidden">
            <button class="button" id="continue-button">Weiter zum Inhalt</button>
        </div>
    </div>
    <div id="tries-container" class="tries-container">
        <h3>Worldwide amount of tries:</h3>
        <h3 id="tries" class="tries">0</h3>
    </div>
    <div id="current-leaderboard" class="leaderboard-container">
        <h3 id="leaderboard-title">Leaderboard</h3>
        <ul id="leaderboard-list" class="leaderboard-list"></ul>
    </div>
    <div id="other-leaderboard" class="leaderboard-container">
        <h3 id="other-leaderboard-title">Leaderboard</h3>
        <ul id="other-leaderboard-list" class="leaderboard-list"></ul>
    </div>

    <script nonce="<%= nonce %>" src="/socket.io/socket.io.js"></script>
    <script nonce="<%= nonce %>">
        document.addEventListener("DOMContentLoaded", () => {
            let correctSequence = [];
            let userSequence = [];
            let puzzleSolved = false;
            let isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
            let timerStarted = false;

            const socket = io();

            socket.on('update-leaderboard', showLeaderboards);

            socket.on('update-tries',()=> {
                showTries();
            });

            socket.on('start-puzzle', () => {
                
            });

            function startPuzzle() {
                socket.emit('start-puzzle');
            }

            async function selectItem(event) {
                if (puzzleSolved) return;
                if (!timerStarted) {
                    startPuzzle();
                    timerStarted = true;
                }

                const gridItem = event.target;
                const number = gridItem.getAttribute('data-number');
                const hashedNumber = await hashNum(number.toString());

                if (correctSequence[userSequence.length] === hashedNumber) {
                    gridItem.classList.add('correct');
                    userSequence.push(number);
                    if (userSequence.length === correctSequence.length) {
                        puzzleSolved = true;
                        socket.emit('end-puzzle', userSequence);
                    }
                } else {
                    gridItem.classList.add('incorrect');
                    setTimeout(() => {
                        document.getElementById('message').innerText = "Wrong sequence. Please try again.";
                        resetPuzzle();
                    }, 80);
                }
            }

            function resetPuzzle() {
                userSequence = [];
                document.querySelectorAll('.grid-item').forEach(item => {
                    item.classList.remove('correct', 'incorrect');
                });
                puzzleSolved = false;
            }

            socket.on('puzzle-solved', (timeTaken) => {
                document.getElementById('input-section').classList.remove('hidden');
                document.getElementById('message').innerText = `You did it in: ${timeTaken} seconds. Please enter your name.`;
            });

            document.getElementById('submit-button').addEventListener('click', () => {
                const name = document.getElementById('name').value;
                if (!name) {
                    document.getElementById('message').innerText = "Please enter your name.";
                    return;
                }

                socket.emit('submit-score', { name, isMobile });
            });

            socket.on('score-submitted', (message) => {
                document.getElementById('message').innerText = message;
                document.getElementById('continue-section').classList.remove('hidden');
                document.getElementById('input-section').classList.add('hidden'); 
            });

            function showLeaderboards() {
                fetch(`/leaderboard?isMobile=${isMobile}`)
                    .then(response => response.json())
                    .then(data => {
                        const leaderboardList = document.getElementById('leaderboard-list');
                        const leaderboardTitle = document.getElementById('leaderboard-title');
                        leaderboardTitle.textContent = isMobile ? "Mobile Leaderboard" : "Desktop Leaderboard";
                        leaderboardList.innerHTML = '';
                        data.forEach((entry, index) => {
                            const listItem = document.createElement('li');
                            listItem.textContent = `${index + 1}. ${entry.name}: ${entry.time} Seconds`;
                            leaderboardList.appendChild(listItem);
                        });
                    });

                fetch(`/leaderboard?isMobile=${!isMobile}`)
                    .then(response => response.json())
                    .then(data => {
                        const otherLeaderboardList = document.getElementById('other-leaderboard-list');
                        const otherLeaderboardTitle = document.getElementById('other-leaderboard-title');
                        otherLeaderboardTitle.textContent = !isMobile ? "Mobile Leaderboard" : "Desktop Leaderboard";
                        otherLeaderboardList.innerHTML = '';
                        data.forEach((entry, index) => {
                            const listItem = document.createElement('li');
                            listItem.textContent = `${index + 1}. ${entry.name}: ${entry.time} Seconds`;
                            otherLeaderboardList.appendChild(listItem);
                        });
                    });
            }

            function showTries() {
                fetch('/tries')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('tries').innerText = `${data.tries}`;
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            }

            document.getElementById('continue-button').addEventListener('click', () => {
                window.location.href = "content.html";
            });

            function getSequence() {
                socket.emit('get-sequence');
            }

            socket.on('get-sequence', (sequence) => {
                correctSequence = sequence;
            });

            window.onload = function() {
                showLeaderboards();
                getSequence();
                showTries();
                document.querySelectorAll('.grid-item').forEach(item => {
                    item.addEventListener('click', selectItem);
                });
            };

            async function hashNum(input) {
                const encoder = new TextEncoder();
                const data = encoder.encode(input);
                const hashBuffer = await crypto.subtle.digest('SHA-256', data);
                const hashArray = Array.from(new Uint8Array(hashBuffer));
                return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            }

            const toggleButton = document.getElementById('darkModeToggle');

            if (localStorage.getItem("darkMode") === "disabled") {
                toggleButton.checked = false;
                enableLightMode();
            }else{
                toggleButton.checked = true;
            }

            toggleButton.addEventListener("change", () => {
                if (toggleButton.checked) {
                    disableLightMode();
                } else {
                    enableLightMode();
                }
            });

            function enableLightMode() {
                document.body.classList.add("light-mode");
                document.querySelectorAll('.container, .leaderboard-container, .button, .grid-item, .tries-container').forEach(el => {
                    el.classList.add('light-mode');
                });
                localStorage.setItem("darkMode", "disabled");
            }

            function disableLightMode() {
                document.body.classList.remove("light-mode");
                document.querySelectorAll('.container, .leaderboard-container, .button, .grid-item, .tries-container').forEach(el => {
                    el.classList.remove('light-mode');
                });
                localStorage.setItem("darkMode", "enabled");
            }

            socket.on('cheater', () => {
                document.body.innerHTML = '<div style="color: red; font-size: 48px; text-align: center; margin-top: 20%;">Cheater</div>';
            });
        });
    </script>
</body>
</html>
